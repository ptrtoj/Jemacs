#+TITLE: JEMACS
#+PROPERTY: header-args :tangle ./init.el
#+STARTUP: show3levels

* Jeon's Extremely Minimal CTRL + ALT + SHIFT

Nth time rewriting my Emacs config.

** Default
#+begin_src elisp
  (use-package emacs
  :custom
  (user-full-name "WooHyoung Jeon")
  (user-mail-address "jeon@ptrtoj.com")
  (use-short-answers t)
  (inhibit-startup-screen t)
  (visible-bell t))
#+end_src

(BTW, Semicolons matter, see: [[ https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html][D.7 Tips on Writing Comments]])

*** DONE Prevent ~custom.el~
Prevent emacs from appending ~custom~ parts into this file, rather put them to ~custom.el~.
#+begin_src elisp :tangle no
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
*** DROP No Backup Files
Dropped because backup file saved my a$$.
#+begin_src elisp :tangle no
  (use-package files
    :custom
    (make-backup-files nil))
#+end_src
*** DONE Remember Recent Files
#+begin_src elisp :tangle no
  (use-package recentf
    :bind
    ("C-x C-r" . recentf-open-files)
    :config
    (recentf-mode 1))
#+end_src
*** DONE Remember Recent Commands
#+begin_src elisp :tangle no
  (use-package savehist
    :config
    (savehist-mode 1))
#+end_src
*** DONE Remember Last Position
#+begin_src elisp :tangle no
  ;;;; Save Last Position
  (use-package saveplace
    :config
    (save-place-mode 1))
#+end_src
*** DONE Auto Revert Buffer
#+begin_src elisp :tangle no
  (use-package autorevert
    :diminish (auto-revert-mode)
    :config
    (global-auto-revert-mode t))
#+end_src
** Packages Manager Related
*** DONE Initialize Package Contents
(~package-refresh-contents~ was moved to ~auto-package-update~ config section)
#+begin_src elisp :tangle no
  (use-package package
    :config
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents)))
#+end_src
*** DONE Auto Update Packages
#+begin_src elisp :tangle no
  (use-package auto-package-update
    :ensure t
    :bind
    ("C-c u p" . package-refresh-contents)
    ("C-c u g" . auto-package-update-now-async)
    :custom
    (setq auto-package-update-prompt-before-update t)
    (setq auto-package-update-delete-old-versions t))
#+end_src
*** DONE Diminish - Hide Minor Modes
#+begin_src elisp :tangle no
      (use-package diminish
	:ensure t)
#+end_src
** Editing
*** DROP Forward to the start of word
*~forward-to-word~* doesn't work well with ~superword-mode~.
#+begin_src elisp :tangle no
  (use-package misc
    :bind
    ("M-f" . forward-to-word))
#+end_src
*** DONE Underscore as One Word
test-field, testField, test field, test_field.
#+begin_src elisp :tangle no
  (use-package subword
    ;; subword enables superword-mode
    :diminish (superword-mode)
    :config
    (global-superword-mode t))
#+end_src
*** DONE Delete selection as I Type
#+begin_src elisp :tangle no
  (use-package delsel
    :config
    (delete-selection-mode 1))
#+end_src
*** DONE Match Parenthesis
Doesn't automatically close the parenthesis in org-mode.
#+begin_src elisp :tangle no
  (use-package elec-pair
    :hook
    (prog-mode . electric-pair-mode)
    (org-mode . electric-pair-mode))
#+end_src
*** DROP Show Parenthesis
Dropped because the default is 'on' already.
#+begin_src elisp :tangle no
  (use-package paren
    :config
    (show-paren-mode t))
#+end_src
*** DONE Trim Whitespaces
#+begin_src elisp :tangle no
  (use-package whitespace
    ;; show whitespace with colors
    ;;:custom
    ;;(whitespace-style '(face tabs tab-mark trailing))
    ;;(custom-set-faces '(whitespace-tab ((t (:foreground "#020202")))))
    :hook
    ;;(prog-mode . whitespace-mode)
    (before-save . whitespace-cleanup))
#+end_src
*** DONE Spellcheck
Check spelling errors.
- aspell (or hunspell)
- And also dictionary files if you chose to use hunspell
- '*.aff' && '*.dic' (e.g. 'en_US.aff' and 'en_US.dic')
Dictionary files should be placed in ~/USER_HOME_DIR/Library/Spelling/~ or ~/Library/Spelling/~.
Homebrew itself doesn't provide dictionaries for Hunspell,
but you can download compatible dictionaries from other sources, such as [[https://cgit.freedesktop.org/libreoffice/dictionaries/tree/][this]].
#+begin_src sh :tangle no
  $ cd ~/Library/Spelling/
  $ wget https://github.com/ropensci/hunspell/raw/master/inst/dict/en_US.aff
  $ wget https://github.com/ropensci/hunspell/raw/master/inst/dict/en_US.dic
#+end_src
#+begin_src elisp :tangle no
  (use-package flyspell
    :diminish
    ;;:config
    ;;(setq ispell-program-name "hunspell")
    ;;(setq ispell-local-dictionary "en_US")
    :hook
    (text-mode . flyspell-mode)
    (prog-mode . flyspell-prog-mode))
    ;;(org-mode . flyspell-prog-mode))
#+end_src
*** DONE Abbreviation
Automatically on, so diminish the minor mode name from modeline.
#+begin_src elisp :tangle no
  (use-package abbrev
    :diminish)
#+end_src
*** DROP Editor Config
(See: [[https://www.kernel.org/doc/html/latest/process/coding-style.html][Linux kernel coding style, 9) Youâ€™ve made a mess of it]], and [[https://editorconfig.org][project website]])
#+begin_src elisp :tangle no
  (use-package editorconfig
    :ensure t
    :hook
    (prog-mode . editorconfig-mode))
#+end_src
** Key Bindings
*** DONE Which-key
#+begin_src elisp :tangle no
  (use-package which-key
    :ensure t
    :diminish
    :config
    (which-key-mode t))
#+end_src
*** DONE Bind-keys
#+begin_src elisp :tangle no
  (use-package bind-keys
    :bind
    ("C-c k" . describe-personal-keybindings))
#+end_src
*** DONE Evil
#+begin_src elisp :tangle no
  (use-package evil
    :ensure t
    :custom
    (evil-want-C-u-scroll t)
    (evil-vsplit-window-right t)
    (evil-want-C-i-jump nil)
    (evil-split-window-below t)
    (evil-vsplit-window-right t)
    :config
    (evil-mode 1))
#+end_src
** Org Mode
*** DONE Helper Fnuction
Correct filename and path are important.
Also, follow the symlink for the file name.
#+begin_src elisp :tangle no
  (defun libj/org-tangle-on-save ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/Git/Dotfiles/.emacs.d/README.org"))
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))
#+end_src
*** DONE Org
#+begin_src elisp :tangle no
  (use-package org
    :custom
    (org-todo-keywords
     '((sequence "TODO" "WIP" "TESTING" "|" "DONE" "DROP")))
    (org-todo-keyword-faces '(("TODO" . "red")
			      ("WIP" . "orange")
			      ("TESTING" . "blue")
			      ("DONE" . "green")
			      ("DROP" . "gray")))
    :hook
    (after-save . libj/org-tangle-on-save))
#+end_src
** Git
*** DROP Magit
#+begin_src elisp :tangle no
  (use-package magit
    :ensure t
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Programming
*** DONE Eglot
#+begin_src elisp :tangle no
  (use-package eglot
    :hook
    (c-mode . eglot-ensure))
#+end_src
*** DONE Eldoc
#+begin_src elisp :tangle no
  (use-package eldoc
    :diminish
    ;;hook
    ;;(emacs-lisp-mode . eldoc-mode)
    ;;(lisp-interaction-mode . eldoc-mode)
    ;;(ielm-mode-hook . eldoc-mode)
    )
#+end_src
*** TODO Eldoc-box
Can't diminish 'ELDOC_BOX' mode indicator on modeline.
#+begin_src elisp :tangle no
  (use-package eldoc-box
    :ensure t
    :after eldoc
    :hook
    (eglot-managed-mode . eldoc-box-hover-at-point-mode)
    :config
    ;;(set-face-attribute 'eldoc-box-body nil :font "Fira Sans")
    (set-face-attribute 'eldoc-box-border nil :background "white"))
#+end_src
*** DONE Flymake
#+begin_src elisp :tangle no
  (use-package flymake
    :bind (:map flymake-mode-map
		("M-n" . 'flymake-goto-next-error)
		("M-p" . 'flymake-goto-prev-error))
    :custom
    (flymake-mode-line-lighter "F"))
#+end_src
*** DONE Treesitter
#+begin_src elisp :tangle no
  (use-package tree-sitter
    :ensure t
    :diminish
    :init
    (global-tree-sitter-mode)
    :hook
    (tree-sitter-after-on . tree-sitter-hl-mode))
  (use-package tree-sitter-langs
    :ensure t
    :after (tree-sitter))
#+end_src
*** DONE Yasnippet
Define helper function.
#+begin_src elisp :tangle no
  (defun libj/company-add-yas-backend (backends)
    "Add yas data to company.
  \\='BACKENDS\\=' argument gets old company backends list"
    (if (and (listp backends) (memq 'company-yasnippet backends))
	backends
      (append (if (consp backends)
		  backends
		(list backends))
	      '(:with company-yasnippet))))
#+end_src
#+begin_src elisp :tangle no
  (use-package yasnippet
    :ensure t
    :diminish (yas-minor-mode)
    :config
    (yas-reload-all)
    :hook
    (prog-mode . yas-minor-mode))
  ;; actual snippets
  (use-package yasnippet-snippets
    :ensure t)
#+end_src
*** DONE Company
#+begin_src elisp :tangle no
  (use-package company
    :ensure t
    :diminish
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :bind
    (:map company-active-map
	  ("M-/" . company-complete))
    :init
    (global-company-mode)
    :config
    (setq company-backends (mapcar #'libj/company-add-yas-backend company-backends)))
  (use-package company-box
    :ensure t
    :diminish
    :hook
    (company-mode . company-box-mode))
#+end_src
*** DONE Fix MacOS Shell Path Probelm
#+begin_src elisp :tangle no
  (use-package exec-path-from-shell
    :ensure t
    :custom
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src
** Language Specifics
*** C
#+begin_src elisp :tangle no
  (use-package cc-mode
    :diminish
    :custom
    (c-basic-offset 4)
    (c-default-style "k&r"))
#+end_src
** Minibuffer
*** DONE Vertico
#+begin_src elisp :tangle no
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src
*** DONE Orderless
#+begin_src elisp :tangle no
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** DONE Marginalia
#+begin_src elisp :tangle no
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
#+end_src
*** Consult
*** Embark
** UI
*** DONE Disable Tool Bar
#+begin_src elisp :tangle no
  (use-package tool-bar
    :config
    (tool-bar-mode -1))
#+end_src
*** DONE Disable Scroll Bar
#+begin_src elisp :tangle no
  (use-package scroll-bar
    :config
    (scroll-bar-mode 0))
#+end_src
*** TODO Faces (fonts and frame)
TODO: 'BLUR' transparency
#+begin_src elisp :tangle no
  (use-package faces
    :config
    (set-face-attribute 'font-lock-keyword-face nil :weight 'bold)
    (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
    (add-to-list 'default-frame-alist '(font . "Berkeley Mono"))
    ;; fullscreen on startup
    ;;(add-to-list 'default-frame-alist '(fullscreen . maximized))
    ;; or set default width and height
    (add-to-list 'default-frame-alist (cons 'width 120))
    (add-to-list 'default-frame-alist (cons 'height 70))
    ;; transparency
    ;; Emacs 29 introduced below, but doesn't work on Macos.
    ;;(set-frame-parameter nil 'alpha-background 90)
    ;;(add-to-list 'default-frame-alist '(alpha-background . 90))
    ;; Rather this works (the old way).
    (set-frame-parameter (selected-frame) 'alpha '(95 95))
    (add-to-list 'default-frame-alist '(alpha 95 95)))
    ;; [DO NOT WORK] Blur the background
    ;;(set-face-background 'default "mac:windowBackgroundColor")
    ;;(set-face-stipple 'default "alpha:30%"))
#+end_src
*** DONE Show Line Numbers
#+begin_src elisp :tangle no
  (use-package display-line-numbers
    :custom
    (display-line-numbers-type 'relative)
    ;; prevent right shift when carry occurs (90->100)
    (display-line-numbers-width-start t)
    :hook
    (prog-mode . display-line-numbers-mode)
    ;;(markdown-mode . display-line-numbers-mode)
    ;; org-mode should be explicitly enabled
    ;; prog-mode doesn't enable org-mode in this mode
    (org-mode . display-line-numbers-mode))
#+end_src
*** TODO Show Column Numbers
#+begin_src elisp :tangle no
  (use-package simple
    :config
    (column-number-mode 1))
#+end_src
*** DONE Max Column Indicator
#+begin_src elisp :tangle no
  (use-package display-fill-column-indicator
    :hook
    (prog-mode . display-fill-column-indicator-mode))
#+end_src
*** DROP Highlight Current Cursor Line
#+begin_src elisp :tangle no
  (use-package hl-line
    :config
    (global-hl-line-mode 1))
#+end_src
*** DROP Show URL as a clickable link
#+begin_src elisp :tangle no
  (use-package goto-addr
    :hook
    (prog-mode . goto-address-prog-mode)
    (text-mode . goto-address-prog-mode))
#+end_src
*** DONE Color Theme
#+begin_src elisp :tangle no
    (use-package catppuccin-theme
      :ensure t
      :config
      (load-theme 'catppuccin t)
      :custom
      (setq catppuccin-flavor 'latte)
      (catppuccin-reload))
#+end_src
*** DONE Ligature
[[https://github.com/mickeynp/ligature.el][[Github]]]
#+begin_src elisp :tangle no
    ;; This assumes you've installed the package via MELPA.
  (use-package ligature
    :ensure t
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
					 ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
					 "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
					 "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
					 "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
					 "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
					 "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
					 "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
					 ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
					 "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
					 "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
					 "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
					 "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
*** DROP Modeline
#+begin_src elisp :tangle no
  ;; run: M-x nerd-icons-install-fonts
  ;;(use-package doom-modeline
  ;;  :ensure t
  ;;  :init (doom-modeline-mode 1))
#+end_src
*** DROP Icons for Mini Buffer
#+begin_src elisp :tangle no
  ;; doom-modeline installs nerd-icons
  ;;(use-package nerd-icons-completion
  ;;  :ensure t
  ;;  :after marginalia
  ;;  :config
  ;;  (nerd-icons-completion-mode)
  ;;  :hook
  ;;  (marginalia-mode . nerd-icons-completion-marginalia-setup))
#+end_src
*** DROP Dired Icons
#+begin_src elisp :tangle no
  ;;;;  Icons for Dired
  ;; doom-modeline installs nerd-icons
  ;;(use-package nerd-icons-dired
  ;;  :ensure t
  ;;  :hook
  ;;  (dired-mode . nerd-icons-dired-mode))
  ;;; init.el ends here
#+end_src
** IRC
*** TODO ERC
#+begin_src elisp :tangle no
  (use-package erc
    :custom
    (erc-nick "jeon")
    (erc-user-full-name user-full-name)
    (erc-echo-notices-in-minibuffer-flag t)
    (erc-hide-list '("JOIN" "PART" "QUIT")))
  (use-package erc-match
    :custom
    (erc-keywords '("jeon")))
#+end_src
